(defun fizzbuzz (x)
  (let ((result))
    (cond ((and (= (mod x 3) 0) (= (mod x 5) 0))
	   (setf result "FizzBuzz"))
	  ((and (= (mod x 3) 0) (not (= (mod x 5) 0)))
	   (setf result "Fizz"))
	  ((and (not (= (mod x 3) 0)) (= (mod x 5) 0))
	   (setf result "Buzz"))
	  (t (setf result x)))
    result))

(defvar clas "class FizzBuzz {")
(defvar main "public static void main(String[] args) {")
(defvar prnt "System.out.println")
(defvar ind4 "    ")
(defvar ind8 "        ")
(defvar initx "int x = Integer.parseInt(args[0]);")
(defvar swtc "switch (x) {")
(defvar ln (list #\linefeed))

(defun generate-fizzbuzz (x &optional (firstrun t) previous)
  (let ((str previous)
	(x x))
    (if firstrun
	(setf str (concatenate 'string clas ln ind4 main ln ind8 initx ln ind8 swtc ln)))
    (setf str (concatenate 'string str (format nil "~a~acase ~s: ~a(~s);~%~a~abreak;~a"
					       ind8 ind4 x prnt (fizzbuzz x) ind8 ind8 #\linefeed)))
    (if (> x 0)
	(generate-fizzbuzz (1- x) nil str)
    (setf str (concatenate 'string str (format nil "~a}~%~a}~%}" ind8 ind4))))))
